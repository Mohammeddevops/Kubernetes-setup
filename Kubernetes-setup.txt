##################################################################
# 	            Kubernetes installation			 #
##################################################################

sudo apt update && apt upgrade
sudo apt upgrade

sudo apt install docker.io
docker --version
sudo systemctl start docker
sudo systemctl enable docker

sudo swapoff -a
sudo apt update && apt upgrade

###########################################################################################
#	apt-transport-https may be a dummy package; if so, you can skip that package      #
###########################################################################################

sudo apt-get install -y apt-transport-https ca-certificates curl gpg
mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update && apt-get upgrade
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

####### upto her both in master and node #######

####### run this below command on master ###########

kubeadm init
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	### run 4 command one by one which you will get after running kubeadm init
	### copy the token from master and save it past it on the worker node to establish connection between them.

 ### command look like this 
	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config
	EXPORT.......

  ### token like this, which should be past in on the worker node
	kubeadm join 172.31.41.116:6443 --token 6hhty0.us8oldyrgs6yn6b3 --discovery-token-ca-cert-hash sha256:046c3fa............
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

###### run this below command on the master######

curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.3/manifests/calico.yaml -O
kubectl apply -f calico.yaml

kubectl get nodes
kubectl get pods -A
kubectl get deploy
kubectl get svc
kubectl get pods -o wide

# set the deployment.yml and service.yml

###############################################################################
#			      deployment.yml				      #
###############################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cicd-app
spec:
  replicas: 1  # Initial replicas
  selector:
    matchLabels:
      app: cicd-app
  template:
    metadata:
      labels:
        app: cicd-app
    spec:
      containers:
      - name: cicd-app
        image: mohammedsait/insurance-web-app-cicd  # Replace with your Docker image name and tag
        ports:
        - containerPort: 8080  # Assuming your app listens on port in Dockerfile

#########################################################################################################################################################################

kubectl apply -f deplyment.yml

# now write the service.yml file 

#####################################################################################
#				service.yml 					    #
#####################################################################################

apiVersion: v1
kind: Service
metadata:
  name: cicd-app
spec:
  selector:
    app: cicd-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080  # Assuming your app runs on port which is set in the Dockerfile
  type: NodePort  # Expose the service outside the cluster

####################################################################################################################################################################

kubectl apply -f service.yml
kubectl get deploy
kubectl get svc
kubectl get pods -o wide


